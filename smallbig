package golang

import ("fmt"
  "math/rand"
	"time")
	
type Card struct {
	suits  string
	number int
}

type WinInfo struct {
	Winner     string
	ComCard    string
	PlayerCard string
	otherCards []string
}

//轉換花色並判斷大小
func Smallbig() []int {

	var c Card
	var Cards, x []int
	var suit []string
	var xyy [4]int

	info := WinInfo{}
	takeCards := GetTakeCards()
	Cards = WetherSame(takeCards)
	for i := 0; i < 4; i++ {
		xyy[i] = Cards[i] % 4
		switch xyy[i] {
		case 0:
			c.suits = "D"
		case 1:
			c.suits = "C"
		case 2:
			c.suits = "B"
		case 3:
			c.suits = "A"
		}
		number := Cards[i]%13 + 1
		suit = append(suit, c.suits)
		x = append(x, number)

	}
	//判斷勝利並展示牌組
	fmt.Println("電腦的牌組:  ", suit[0], x[0])
	fmt.Println("玩家的牌組:  ", suit[1], x[1])
	fmt.Println("玩家剩的牌組:", suit[2], x[2])
	fmt.Println("玩家剩的牌組:", suit[3], x[3])

	for i := 0; i < 2; i++ {

		if x[i] == 1 {
			x[i] += 52
		}
	}

	if x[0] > x[1] {
		info.Winner = "computer"
		fmt.Println("電腦獲勝")
	} else if x[0] == x[1] {
		if Cards[0] > Cards[1] {
			info.Winner = "computer"
			fmt.Println("電腦獲勝")
		} else {
			info.Winner = "player"
			fmt.Println("玩家獲勝")
		}

	} else {
		info.Winner = "player"
		fmt.Println("玩家獲勝")
	}
	fmt.Println("")
	return Cards
}




// 抽4張牌
func GetTakeCards() []int {
	var Cards []int
	rand.Seed(time.Now().UnixNano())
	for i := 0; i < 4; i++ {
		Cards = append(Cards, rand.Intn(52))
	}
	return Cards
}

// 判斷牌組是否重複
func WetherSame(card []int) []int {
	for i := 0; i < 3; i++ {
		for j := i + 1; j < 4; j++ {
			if card[i] == card[j] {
				card = GetTakeCards()

				i = -1
				break
			}
		}
	}
	return card
}
